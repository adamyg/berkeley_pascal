/* -*- mode: c; tabs: 8; -*- */

2.      Operations

2.1.    Naming conventions and operation summary

Table 2.1 outlines the opcode typing convention. The expression
``a above b'' means that `a' is on top of the stack with `b' below
it. Table 2.3 describes each of the opcodes. The character `*' at
the end of a name specifies that all operations with the root prefix
before the `*' are summarized by one entry. Table 2.2 gives the codes
used to describe the type inline data expected by each instruction.

            +---------------------------------------------------------
            |                Unary operator suffixes                 |
            +----------+---------------+-----------------------------+
            |Suffix    |Example        |Argument type                |
            |          |               |                             |
            |   2      |NEG2           |Short integer (2 bytes)      |
            |   4      |SQR4           |Long integer (4 bytes)       |
            |   8      |ABS8           |Real (8 bytes)               |
            +----------+---------------+-----------------------------+
            |              Binary operator suffixes                  |
            +----------+---------------+------------------------------
            |Suffix    |Example        |Argument type                |
            |          |               |                             |
            |   2      |ADD2           |Two short integers           |
            |   24     |MUL24          |Short above long integer     |
            |   42     |REL42          |Long above short integer     |
            |   4      |DIV4           |Two long integers            |
            |   28     |DVD28          |Short integer above real     |
            |   48     |REL48          |Long integer above real      |
            |   82     |SUB82          |Real above short integer     |
            |   84     |MUL84          |Real above long integer      |
            |   8      |ADD8           |Two reals                    |
            +----------+---------------+------------------------------
            |                    Other Suffixes                      |
            +----------+---------------+------------------------------
            |Suffix    |Example        |Argument type                |
            |          |               |                             |
            |   T      |ADDT           |Sets                         |
            |   G      |RELG           |Strings                      |
            |          |               |                             |
            +----------+--------------++-----------------------------+
                            Table 2.1 - Operator Suffixes

    +----------------------------------------------------------------------
    |   Code  | Description                                               |
    +---------+-----------------------------------------------------------+
    |   a     | An address offset is given in the word following the      |
    |         | instruction.                                              |
    |         |                                                           |
    |   A     | An address offset is given in the four bytes following    |
    |         | the instruction.                                          |
    |         |                                                           |
    |   l     | An index into the display is given in the sub-opcode.     |
    |         |                                                           |
    |   r     | A relational operator is encoded in the sub-opcode.       |
    |         | (see section 2.3)                                         |
    |         |                                                           |
    |   s     | A small integer is placed in the sub-opcode, or in the    |
    |         | next word if it is zero or too large.                     |
    |         |                                                           |
    |   v     | Variable length inline data.                              |
    |         |                                                           |
    |   w     | A word value in the following word.                       |
    |         |                                                           |
    |   W     | A long value in the following four bytes.                 |
    |         |                                                           |
    |   "     | An inline constant string.                                |
    +---------+--------------------+--------------------------------------+
                         Table 2.2 - Inline data type codes


 +---------------+-----------------------------------------------------------
 |Mnemonic       |Reference³Description                                     |
 +---------------+---------+------------------------------------------------+
 |ABS*           |2.7      |Absolute value                                  |
 |ADD*           |2.7      |Addition                                        |
 |AND            |2.4      |Boolean and                                     |
 |ARGC           |2.14     |Returns number of arguments to current process  |
 |ARGV           |2.14     |Copy specified process argument into char array |
 |AS*            |2.5      |Assignment operators                            |
 |ASRT           |2.12     |Assert true to continue                         |
 |ATAN           |2.13     |Returns arctangent of argument                  |
 |BEG s,W,w,"    |2.2,1.8  |Write second part of block mark, enter block    |
 |BUFF           |3.11     |Specify buffering for file "output"             |
 |CALL l,A       |2.2,1.8  |Procedure or function call                      |
 |CARD s         |2.11     |Cardinalityof set                               |
 |CASEOP*        |2.9      |Case statements                                 |
 |CHR*           |2.15     |Returns integer to ascii mapping of argument    |
 |CLCK           |2.14     |Returns user time of program                    |
 |CON* v         |2.5      |Load constant operators                         |
 |COS            |2.13     |Returns cos of argument                         |
 |COUNT w        |2.10     |Count a statement count point                   |
 |CTTOT s,w,w    |2.11     |Construct set                                   |
 |DATE           |2.14     |Copy date into char array                       |
 |DEFNAME        |3.11     |Attach file name for program statement files    |
 |DISPOSE        |2.15     |Dispose of a heap allocation                    |
 |DIV*           |2.7      |Fixed division                                  |
 |DVD*           |2.7      |Floating division                               |
 |END            |2.2,1.8  |End block execution                             |
 |EOF            |3.10     |Returns true if end of file                     |
 |EOLN           |3.10     |Returns true if end of line on input text file  |
 |EXP            |2.13     |Returns exponential of argument                 |
 |EXPO           |2.13     |Returns machine representation of real exponent |
 |FILE           |3.9      |Push descriptor for active file                 |
 |FLUSH          |3.11     |Flush a file                                    |
 |FNIL           |3.7      |Check file initialized, not eof, synced         |
 |FOR* a         |2.12     |For statements                                  |
 |GET            |3.7      |Get next record from a file                     |
 |GOTO l,A       |2.2,1.8  |Non-local goto statement                        |
 |HALT           |2.2      |Produce control flow backtrace                  |
 |IF a           |2.3      |Conditional transfer                            |
 |IN s,w,w       |2.11     |Set membership                                  |
 |INCT           |2.11     |Membership in a constructed set                 |
 |IND*           |2.6      |Indirection operators                           |
 |INX* s,w,w     |2.6      |Subscripting (indexing) operator                |
 |ITOD           |2.12     |Convert integer to real                         |
 |ITOS           |2.12     |Convert integer to short integer                |
 |LINO s         |2.2      |Set line number, count statements               |
 |LLIMIT         |2.14     |Set linelimit for output text file              |
 |LLV l,W        |2.6      |Addressof operator                              |
 |LN             |2.13     |Returns natural log of argument                 |
 |LRV* l,A       |2.5      |Right value (load) operators                    |
 |LV l,w         |2.6      |Addressof operator                              |
 |MAX s,w        |3.8      |Maximum of top of stack and w                   |
 |MESSAGE        |3.6      |Writeto terminal                                |
 |MIN s          |3.8      |Minimum of top of stack and s                   |
 |MOD*           |2.7      |Modulus                                         |
 |MUL*           |2.7      |Multiplication                                  |
 |NAM A          |3.8      |Convert enumerated type value to print format   |
 |NEG*           |2.7      |Negation                                        |
 |NEW s          |2.15     |Allocate a record on heap, set pointer to it    |
 |NIL            |2.6      |Assert non-nil pointer                          |
 |NODUMP s,W,w," |2.2      |BEG main program, suppress dump                 |
 |NOT            |2.4      |Boolean not                                     |
 |ODD*           |2.15     |Returns true if argument is odd, false if even  |
 |OFF s          |2.5      |Offset address, typically used for field        |
 |               |         |reference                                       |
 |OR             |2.4      |Boolean or                                      |
 |PACK s,w,w,w   |2.15     |Convert and copy from unpacked to packed        |
 |PAGE           |3.8      |Output a formfeed to a text file                |
 |POP s          |2.2,1.9  |Pop (arguments) off stack                       |
 |PRED*          |2.7      |Returns predecessor of argument                 |
 |PUSH s         |2.2,1.9  |Clear space (for function result)               |
 |PUT            |3.8      |Output a record to a file                       |
 |PXPBUF w       |2.10     |Initialize pxp count buffer                     |
 |RANDOM         |2.13     |Returns random number                           |
 |RANG* v        |2.8      |Subrange checking                               |
 |READ*          |3.7      |Read a record from a file                       |
 |REL* r         |2.3      |Relational test yielding Boolean result         |
 |REMOVE         |3.11     |Remove a file                                   |
 |RESET          |3.11     |Open file for input                             |
 |REWRITE        |3.11     |Open file for output                            |
 |ROUND          |2.13     |Returns TRUNC(argument + 0.5)                   |
 |RV* l,a        |2.5      |Right value (load) operators                    |
 |SCLCK          |2.14     |Returns system time of program                  |
 |SDUP           |2.2      |Duplicate top stack word                        |
 |SEED           |2.13     |Set random seed, return old seed                |
 |SIN            |2.13     |Returns sin of argument                         |
 |SQR*           |2.7      |Squaring                                        |
 |SQRT           |2.13     |Returns square root of argument                 |
 |STLIM          |2.14     |Set program statement limit                     |
 |STOD           |2.12     |Convert short integer to real                   |
 |STOI           |2.12     |Convert short to long integer                   |
 |SUB*           |2.7      |Subtraction                                     |
 |SUCC*          |2.7      |Returns successor of argument                   |
 |TIME           |2.14     |Copy time into char array                       |
 |TRA a          |2.2      |Short control transfer (local branching)        |
 |TRA4 A         |2.2      |Long control transfer                           |
 |TRACNT w,A     |2.10     |Count a procedure entry                         |
 |TRUNC          |2.13     |Returns integer part of argument                |
 |UNDEF          |2.15     |Returns false                                   |
 |UNIT*          |3.10     |Set active file                                 |
 |UNPACK s,w,w,w |2.15     |Convert and copy from packed to unpacked        |
 |WCLCK          |2.14     |Returns current time stamp                      |
 |WRITEC         |3.8      |Character unformatted write                     |
 |WRITEF l       |3.8      |General formatted write                         |
 |WRITES l       |3.8      |String unformatted write                        |
 |WRITLN         |3.8      |Output a newline to a text file                 |
 +---------------+---------+-----------+------------------------------------+
                             Table 2.3 - Machine Operations
