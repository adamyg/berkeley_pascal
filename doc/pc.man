PC(1)                       General Commands Manual                      PC(1)

NNAAMMEE
     ppcc - Pascal compiler

SSYYNNOOPPSSIISS
     ppcc [option] [--ii _n_a_m_e _._._.] _n_a_m_e _._._.

DDEESSCCRRIIPPTTIIOONN
     PPcc is a Pascal compiler.  If given an argument file ending with _._p, it
     will compile the file and load it into an executable file called, by
     default, _a_._o_u_t.

     A program may be separated into more than one _._p file.  PPcc will compile a
     number of argument _._p files into object files (with the extension _._o in
     place of _._p).  Object files may then be loaded into an executable _a_._o_u_t
     file.  Exactly one object file must supply a _p_r_o_g_r_a_m statement to
     successfully create an executable a.out file.  The rest of the files must
     consist only of declarations which logically nest within the program.
     References to objects shared between separately compiled files are
     allowed if the objects are declared in iinncclluuddeedd header files, whose names
     must end with _._h.  Header files may only be included at the outermost
     level, and thus declare only globally available objects.  To allow
     ffuunnccttiioonns and pprroocceedduurrees to be declared, an eexxtteerrnnaall directive has been
     added, whose use is similar to the ffoorrwwaarrdd directive but restricted to
     appear only in _._h files.  FFuunnccttiioonn and pprroocceedduurree bodies may not appear in
     _._h files.  A binding phase of the compiler checks that declarations are
     used consistently, to enforce the type checking rules of Pascal.

     Object files created by other language processors may be loaded together
     with object files created by ppcc.  The ffuunnccttiioonns and pprroocceedduurrees they
     define must have been declared in _._h files included by all the _._p files
     which call those routines.  Calling conventions are as in C, with vvaarr
     parameters passed by address.

     See the _B_e_r_k_e_l_e_y _P_a_s_c_a_l _U_s_e_r_'_s _M_a_n_u_a_l for details.

     The following options have the same meaning as in cc(1) and f77(1).  See
     ld(1) for load-time options.

     --cc      Suppress loading and produce `.o' file(s) from source file(s).

     --gg      Have the compiler produce additional symbol table information for
             dbx(1).

     --ww      Suppress warning messages.

     --pp      Prepare object files for profiling, see prof(1).

     --OO      Invoke an object-code improver.

     --SS      Compile the named program, and leave the assembler-language
             output on the corresponding file suffixed `.s'.  (No `.o' is
             created.).

     --oo_o_u_t_p_u_t
             Name the final output file _o_u_t_p_u_t instead of _a_._o_u_t.

     The following options are peculiar to ppcc.

     --CC      Compile code to perform runtime checks, verify aasssseerrtt calls, and
             initialize all variables to zero as in ppii.

     --bb      Block buffer the file _o_u_t_p_u_t.

     --ii      Produce a listing for the specified procedures, functions and
             _i_n_c_l_u_d_e files.

     --ll      Make a program listing during translation.

     --ss      Accept standard Pascal only; non-standard constructs cause
             warning diagnostics.

     --tt _d_i_r_e_c_t_o_r_y
             Use the given _d_i_r_e_c_t_o_r_y for compiler temporary files.

     --zz      Allow execution profiling with ppxxpp by generating statement
             counters, and arranging for the creation of the profile data file
             _p_m_o_n_._o_u_t when the resulting object is executed.

     Other arguments are taken to be loader option arguments, perhaps
     libraries of ppcc compatible routines.  Certain flags can also be
     controlled in comments within the program as described in the _B_e_r_k_e_l_e_y
     _P_a_s_c_a_l _U_s_e_r_'_s _M_a_n_u_a_l_.

FFIILLEESS
     _f_i_l_e_._p                 Pascal source files.
     _/_u_s_r_/_l_i_b_/_p_c_0           Compiler.
     _/_l_i_b_/_f_1                Code generator.
     _/_u_s_r_/_l_i_b_/_p_c_2           Runtime integrator (inline expander).
     _/_l_i_b_/_c_2                Peephole optimizer.
     _/_u_s_r_/_l_i_b_/_p_c_3           Separate compilation consistency checker.
     _/_u_s_r_/_l_i_b_/_p_c_2_._*_s_t_r_i_n_g_s  Text of the error messages.
     _/_u_s_r_/_l_i_b_/_h_o_w___p_c        Basic usage explanation.
     _/_u_s_r_/_l_i_b_/_l_i_b_p_c_._a       Intrinsic functions and I/O library.
     _/_u_s_r_/_l_i_b_/_l_i_b_m_._a        Math library.
     _/_l_i_b_/_l_i_b_c_._a            Standard library, see intro(3).

SSEEEE AALLSSOO
     pi(1), pxp(1), pxref(1),

     _B_e_r_k_e_l_e_y _P_a_s_c_a_l _U_s_e_r_'_s _M_a_n_u_a_l.

HHIISSTTOORRYY
     The ppcc appeared in 4.0BSD.

DDIIAAGGNNOOSSTTIICCSS
     For a basic explanation do

           pc

     See pi(1).  for an explanation of the error message format.  Internal
     errors cause messages containing the word SNARK.

BBUUGGSS
     The keyword ppaacckkeedd is recognized but has no effect.

     The binder is not as strict as described here, with regard to the rules
     about external declarations only in `.h' files and including `.h' files
     only at the outermost level.  It will be made to perform these checks in
     its next incarnation, so users are warned not to be sloppy.

     The --zz flag doesn't work for separately compiled files.

     Because the --ss option is usurped by the compiler, it is not possible to
     pass the strip option to the loader.  Thus programs which are to be
     stripped, must be run through strip(1) after they are compiled.

BSD 4                            June 6, 1993                            BSD 4
