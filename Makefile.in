# Berkeley Pascal - top level makefile.
#
#
# Copyright (c) 2020 - 2022, Adam Young.
# All rights reserved.
#
# The applications are free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 3 of the License,
# or (at your option) any later version.
#
# Redistributions of source code must retain the above copyright
# notice, and must be distributed with the license document above.
#
# Redistributions in binary form must reproduce the above copyright
# notice, and must include the license document above in
# the documentation and/or other materials provided with the
# distribution.
#
# The applications are distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
# ==end==
#

@SET_MAKE@
ROOT		= @abs_top_builddir@

PACKAGE		= Berkeley_Pascal
PKG_BUGREPORT	= @PACKAGE_BUGREPORT@
PKG_NAME	= @PACKAGE_NAME@
PKG_STRING	= @PACKAGE_STRING@
PKG_TARNAME	= @PACKAGE_TARNAME@
PKG_URL		= @PACKAGE_URL@
PKG_VERSION	= @PACKAGE_VERSION@
ifeq ("","$(PKG_VERSION)")
PKG_VERSION	= 1.0.0
endif
PKG_VERSION_1	=$(word 1,$(subst ., ,$(PKG_VERSION)))
PKG_VERSION_2	=$(word 2,$(subst ., ,$(PKG_VERSION)))
PKG_VERSION_3	=$(word 3,$(subst ., ,$(PKG_VERSION)))

PATH_SEPARATOR	= @PATH_SEPARATOR@

build		= @build@
build_alias	= @build_alias@
build_cpu	= @build_cpu@
build_os	= @build_os@
build_vendor	= @build_vendor@

host		= @host@
host_alias	= @host_alias@
host_cpu	= @host_cpu@
host_os 	= @host_os@
host_vendor	= @host_vendor@

target		= @target@
target_alias	= @target_alias@
target_cpu	= @target_cpu@
target_os	= @target_os@
target_vendor	= @target_vendor@

	# directory components
prefix		= @prefix@
exec_prefix	= @exec_prefix@
datarootdir	= @datarootdir@

	# directory results
bindir		= @bindir@
sbindir		= @sbindir@
libexecdir	= @libexecdir@
libdir		= @libdir@
datadir		= @datadir@

        # package directories
pkgname		= ucbpascal
ifeq (rief,$(findstring rief,$(libexecdir)))
pkglibexecdir	= $(libexecdir)
pkglibdir	= $(libdir)
else
pkglibexecdir	= $(libexecdir)/$(pkgname)
pkglibdir	= $(libdir)/$(pkgname)
endif
ifeq (rief,$(findstring rief,$(libexecdir)))
pkgdatadir	= $(datadir)
else
pkgdatadir	= $(datadir)/$(pkgname)
endif

BINDIR		= $(bindir)
SBINDIR		= $(sbindir)
LIBEXECDIR	= $(pkglibexecdir)
LIBDIR		= $(pkglibdir)
DATADIR		= $(pkgdatadir)

top_build_prefix= @top_build_prefix@
top_builddir	= @top_builddir@
top_srcdir	= @top_srcdir@

# File extensions

E=
A=		.a
O=		.o
LP=		lib
E=		.exe

CLEAN=		*.bak *~ *.BAK *.swp *.tmp core *.core a.out
XCLEAN=

# Configuration

ifeq ("$(BUILD_TYPE)","")	#default
BUILD_TYPE=	debug
MAKEFLAGS+=	BUILD_TYPE=debug
endif
ifneq ("$(BUILD_TYPE)","release")
RTSUFFIX=d
endif

# Directories

D_INC=		$(ROOT)/include
D_BIN=		$(ROOT)/bin@TOOLCHAINEXT@/$(BUILD_TYPE)
D_LIB=		$(ROOT)/lib@TOOLCHAINEXT@/$(BUILD_TYPE)
D_OBJ=		$(ROOT)/objects@TOOLCHAINEXT@/$(BUILD_TYPE)
LW=		$(D_LIB)/$(LP)

# Compilers, programs

CC=		@CC@
CXX=		@CXX@
AR=		@AR@
RM=		@RM@
RMDIR=		@RMDIR@
CP=		@CP@
RC=		@RC@
PERL=		@PERL@
TAR=		@TAR@
INSTALL=	@INSTALL@
INSTALL_PROGRAM=@INSTALL_PROGRAM@
INSTALL_DATA=	@INSTALL_DATA@

INNO=		@INNO@
ifeq ($(INNO),) # Inno5: allowing legacy XP installations
INNO=		"C:/Program Files (x86)/Inno Setup 5/Compil32"
endif

BUSYBOX=	@BUSYBOX@
ifeq ($(BUSYBOX),busybox)
BUSYBOX=	$(shell which busybox 2>/dev/null)
endif

# Common flags

XFLAGS=
CFLAGS=		@CFLAGS@
CWARN=		@CWARN@
CDEBUG=		@CDEBUG@
CRELEASE=	@CRELEASE@
LDDEBUG=	@LDDEBUG@
LDRELEASE=	@LDRELEASE@

CINCLUDE=	@CINCLUDE@

CEXTRA=		@DEFS@
ifeq ("$(BUILD_TYPE)","release")
CFLAGS+=	$(CRELEASE) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDRELEASE) @LDFLAGS@
else
CFLAGS+=	$(CDEBUG) $(CWARN) $(CINCLUDE) $(CEXTRA) $(XFLAGS)
LDFLAGS=	$(LDDEBUG) @LDFLAGS@
endif
LDLIBS=		-L$(D_LIB) @LIBS@ @EXTRALIBS@

ARFLAGS=	rcv
RMFLAGS=	-f
RMDFLAGS=	-rf

#########################################################################################
# Targets

ifeq ("wcl386","$(CC)")
ifeq ("@TOOLCHAIN@","owc20")
CLBRNAME=	clbr20
MT7RNAME=	mt7r20
PLBRNAME=	plbr20
else
CLBRNAME=	clbr19
MT7RNAME=	mt7r19
PLBRNAME=	plbr19
endif
LIBCLBRPATH=	$(shell which $(CLBRNAME).dll)
LIBMT7RPATH=	$(shell which $(MT7RNAME).dll)
LIBPLBRPATH=	$(shell which $(PLBRNAME).dll)
endif

BUILDINFO=	include/buildinfo.h

UTILS=\
	$(LW)compat			\
	$(D_BIN)/byacc$(E)		\
	$(D_BIN)/ex$(E) 		\
	contrib				\

LIBS=\
	$(LW)pc
	
BINS=\
	$(D_BIN)/eyacc$(E)		\
	$(D_BIN)/byacc$(E)		\
	$(D_BIN)/ex$(E)			\
	$(D_BIN)/pi$(E)			\
	$(D_BIN)/px$(E)			\
	$(D_BIN)/pdx$(E)		\
	$(D_BIN)/pmerge$(E)

IMPORT=
ifeq ("wcl386","$(CC)")
IMPORT+=\
	$(D_BIN)/$(CLBRNAME).dll	\
	$(D_BIN)/$(MT7RNAME).dll	\
	$(D_BIN)/$(PLBRNAME).dll
endif


#########################################################################################
# Rules

.PHONY:			build release debug
build:			directories buildinfo utils libs bins import doc

release:
		$(MAKE) BUILD_TYPE=release $(filter-out release, $(MAKECMDGOALS))
debug:
		$(MAKE) BUILD_TYPE=debug $(filter-out debug, $(MAKECMDGOALS))

#new_release:		new_buildnumber
#		$(MAKE) release
#
#.PHONY: package
#package:
#		$(INNO) ./support/pascal-inno-setup.iss

# Build support

BUILD_DATE=		$(shell $(BUSYBOX) date +'%Y%m%d')
ifneq ($(APPVEYOR_BUILD_NUMBER),)
BUILD_NUMBER=		$(APPVEYOR_BUILD_NUMBER)
else
BUILD_NUMBER=		$(shell $(BUSYBOX) cat BUILDNUMBER)
endif

.PHONY: 		buildinfo new_buildnumber
buildinfo.h:		buildinfo
buildinfo:
		@echo updating buildinfo.h ...
		-@$(PERL) ./buildinfo.pl -o $(BUILDINFO) --package="$(PACKAGE)" --name="$(PKG_NAME)" --version="$(PKG_VERSION)" \
			--date="$(BUILD_DATE)" --build="$(BUILD_NUMBER)" --toolchain="@TOOLCHAIN@" --type="$(BUILD_TYPE)" \
			--bindir="$(BINDIR)" --sbindir="$(SBINDIR)" --libexecdir="$(LIBEXECDIR)" --libdir="$(LIBDIR)" --datadir="$(DATADIR)"

buildinfo.h:		BUILDNUMBER buildinfo.pl

ifneq ($(APPVEYOR_BUILD_NUMBER),)
BUILDNUMBER:
		@echo importing appveyor build number  ...
		@echo $(APPVEYOR_BUILD_NUMBER)>$@
endif

new_buildnumber:
		-@chmod +w BUILDNUMBER >nul 2>&1
		@echo incrementing build number ...
		-@$(BUSYBOX) sh -c "\
			if [ ! -f BUILDNUMBER ]; then echo 1 >BUILDNUMBER; fi;\
			echo $$(($$(cat BUILDNUMBER) + 1)) >BUILDNUMBER;\
			"
		-@chmod -w BUILDNUMBER >/dev/null 2>&1

# Components

directories:		$(D_OBJ)/.created $(D_LIB)/.created $(D_BIN)/.created $(D_INC)/.created

%/.created:
		-@$(PERL) ./support/mkdir_p.pl $(@D)
		@echo "++ do not delete, managed content ++" > $@

bins:			$(BINS)

$(D_BIN)/%$(E):		libs
		@echo --- building $@
		$(MAKE) -C $(notdir $(basename $@))

utils:			$(UTILS)

libs:			$(LIBS)

.PHONY: contrib
contrib:
		@echo --- building $@
		$(MAKE) -C contrib

$(LW)%:
		@echo --- building $@
		$(MAKE) -C $(notdir $(basename $@))

.PHONY: import
import:				$(IMPORT)

ifeq ("wcl386","$(CC)")
$(D_BIN)/$(CLBRNAME).dll:	$(LIBCLBRPATH)
		@echo importing $(LIBCLBRPATH)
		@$(CP) -f $(subst /,\,$^) $@

$(D_BIN)/$(MT7RNAME).dll:	$(LIBMT7RPATH)
		@echo importing $(LIBMT7RPATH)
		@$(CP) -f $^ $@

$(D_BIN)/$(PLBRNAME).dll:	$(LIBPLBRPATH)
		@echo importing $(LIBPLBRPATH)
		@$(CP) -f $(subst /,\,$^) $@
endif

.PHONY: doc
doc:
		$(MAKE) -C doc

install:		all
		-mkdir -p $(BINDIR)
		-mkdir -p $(DATADIR)
		$(INSTALL_PROGRAM) -m 0755 -c -o bin -g bin $(D_BIN)/xxx$(E) $(BINDIR)

clean:
		@echo $(BUILD_TYPE) clean
		$(MAKE) -C pmerge clean
		$(MAKE) -C pdx clean
		$(MAKE) -C pi clean
		$(MAKE) -C px clean
		$(MAKE) -C byacc clean
		$(MAKE) -C eyacc clean
		$(MAKE) -C ex clean
		$(MAKE) -C contrib clean
		$(MAKE) -C libcompat clean
		$(MAKE) -C libpc clean

vclean:			clean
		-@$(RM) $(RMDFLAGS) $(D_BIN)/* $(D_MACROS)/* $(D_HELP)/* $(D_LIB)/* $(D_OBJ)/*
		-rmdir $(D_BIN) $(D_MACROS) $(D_HELP) $(D_LIB) $(D_OBJ)

distclean:		clean
		$(RM) $(RMFLAGS) config.cache config.log config.status \
			pmerge/Makefile \
			pdx/Makefile \
			pi/Makefile \
			px/Makefile \
			ex/Makefile \
			eyacc/Makefile \
			byacc/Makefile \
			libpc/Makefile \
			libcompat/Makefile \
			contrib/libregex/Makefile \
			contrib/flex/Makefile \
			contrib/Makefile \
			include/config.h \
			Makefile

#end
