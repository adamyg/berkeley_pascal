/*-
 * Copyright (c) 1980, 1993
 *	The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. All advertising materials mentioning features or use of this software
 *    must display the following acknowledgement:
 *	This product includes software developed by the University of
 *	California, Berkeley and its contributors.
 * 4. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 *
 *	@(#)frame.rep	8.1 (Berkeley) 6/6/93
 */

/*
 * Definitions for accessing stack frames.
 */

#define MAINBLK		1

/*
 * Structure of an activation record's block mark.  See the
 * PX implementation notes for more details.
 */

struct frame {
	ADDRESS stackref;	/* for px self-checking */
	ADDRESS file;		/* current file information */
	ADDRESS blockp;		/* pointer to current block name */
	ADDRESS *save_loc;	/* saved local variable pointer */
	ADDRESS *save_disp;	/* saved dp contents */
	ADDRESS *save_dp;	/* saved dp */
	ADDRESS save_pc;	/* saved location counter */
	int save_lino;		/* saved source line number (never used) */
};

FRAME *curframe();		/* get the currently active frame */
FRAME *nextframe();		/* go up the stack */
FRAME *findframe();		/* find the frame for a given function */
ADDRESS entry();		/* get the entry address for a frame */
ADDRESS *dispval();		/* display associated with a given block */
ADDRESS *curdp();		/* return current display pointer */
ADDRESS *contents();		/* return the contents of display pointer */
ADDRESS stkaddr();		/* stack address associated with a frame */
